{"version":3,"file":"sha-obj.cjs","sources":["../src/sha-obj.js"],"sourcesContent":["/**\n * [SHAObj]{@link https://github.com/UmamiAppearance/BrowserSHAObj}\n *\n * @version 1.0.4\n * @author UmamiAppearance [mail@umamiappearance.eu]\n * @license MIT\n */\n\nimport { BaseEx } from \"base-ex\";\n\nconst ALGORITHMS = [\"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\"];\n\nlet BASE_EX;\nif (typeof BaseEx !== \"undefined\") {\n    if (\"BaseEx\" in BaseEx) {\n        BASE_EX = new BaseEx.BaseEx();\n    } else {\n        BASE_EX = new BaseEx();\n    }\n}\n\n\n/**\n * Creates a SHA-(1-512) object for JavaScript.\n * It is very closely related to pythons hashlib\n * in its methods and features.\n * \n * It provides an easy access to the global Crypto.subtle\n * method, and also makes it possible to get multiple\n * different digest methods.\n * \n * @see: https://docs.python.org/3/library/hashlib.html\n */\nexport default class SHAObj {\n\n    #algorithm = null;\n    #bits = null;\n    #digest = null;\n    #input = [];\n\n    /**\n     * Creates a SHAObject.\n     * @param {string|number} [algorithm=\"SHA-256\"] - The parameter must contain one of the numbers (1/256/384/512), eg: SHA-1, sha256, 384, ... \n     */\n    constructor(algorithm=\"SHA-256\") {\n\n        const algorithms = this.constructor.algorithmsAvailable();\n        \n        this.#bits = [].concat(String(algorithm).match(/[0-9]+/)).at(0)|0;\n        this.#algorithm = `SHA-${this.#bits}`;\n\n        // convert sha1 to its actual 160 bits\n        if (this.#bits === 1) {\n            this.#bits = 160;\n        }\n\n        if (!algorithms.has(this.#algorithm)) {\n            throw new TypeError(`Available algorithms are: '${ALGORITHMS.join(\", \")}'.`);\n        }\n\n        if (BASE_EX) {\n            this.#addConverters();\n        }\n    }\n\n    /**\n     * BaseEx instance.\n     */\n    static baseEx = BASE_EX;\n\n\n    /**\n     * Static method to receive information about the \n     * available algorithms.\n     * @returns {set} - A set of available algorithms.\n     */\n    static algorithmsAvailable() {\n        return new Set(ALGORITHMS);\n    }\n\n\n    /**\n     * Added for the sake of completeness in terms\n     * of compatibility with pythons hashlib. Here\n     * it is pointing to 'algorithmsAvailable'.\n     * @returns {set} - A set of available algorithms.\n     */\n    static algorithmsGuaranteed() {\n        return this.constructor.algorithmsAvailable();\n    }\n\n\n    /**\n     * Asynchronously creates a new instance.\n     * Additionally an input can be provided, which \n     * gets passed to the 'update' method.\n     * @param {string|number} algorithm - The parameter must contain one of the numbers (1/256/384/512), eg: SHA-1, sha256, 384, ... \n     * @param {*} input - Input gets converted to bytes and processed by crypto.subtle.digest. \n     * @returns {Object} - A SHAObj instance.\n     */\n    static async new(algorithm=\"SHA-256\", input=null) {\n        const shaObj = new this(algorithm);\n        if (input !== null) {\n            await shaObj.update(input);\n        }\n        return shaObj;\n    }\n\n\n    /**\n     * The size of the resulting hash in bytes.\n     */\n    get digestSize() {\n        return this.#bits / 8;\n    }\n\n\n    /**\n     * The internal block size of the hash algorithm in bytes.\n     */\n    get blockSize() {\n        return this.#bits > 256 ? 128 : 64;\n    }\n\n\n    /**\n     * The canonical name of this hash, always uppercase and\n     * always suitable as a parameter to create another hash\n     * of this type.\n     */\n    get name() {\n        return this.#algorithm;\n    }\n\n\n    /**\n     * Return a copy (“clone”) of the hash object. This can be\n     * used to efficiently compute the digests of data sharing\n     * a common initial substring.\n     * @returns {Object} - SHAObj instance.\n     */\n    async copy() {\n        const input = this.#input.length\n            ? Uint8Array.from(this.#input)\n            : null;\n\n        return this.constructor.new(this.#algorithm, input);\n    }\n\n\n    /**\n     * Update the hash object with almost any input. The input\n     * gets converted to a Uint8Array. Unless 'replace' is set\n     * to true, repeated calls are equivalent to a single call\n     * with the concatenation of all the arguments:\n     * shaObj.update(a); shaObj.update(b) is in many occasions\n     * equivalent to shaObj.update(a+b).\n     * \n     * (Note: The process is a concatenation of bytes. Take as\n     * an exception for instance:\n     * shaObj.update(1); shaObj.update(2) which is not the same\n     * as shaObj.update(1+2))\n     * \n     * @param {*} input - Input gets converted to bytes and processed by crypto.subtle.digest.\n     * @param {boolean} replace - If true, the input is not concatenated with former input. \n     */\n    async update(input, replace=false) {\n        \n        if (input instanceof ArrayBuffer) {\n            input = new Uint8Array(input);\n        } else if (ArrayBuffer.isView(input)) {\n            input = new Uint8Array(input.buffer);\n        } else {\n            if (!BASE_EX) {\n                throw new TypeError(\"You need BaseEx if you like to digest anything other than byte-like input.\");\n            }\n            input = BASE_EX.byteConverter.encode(input, \"uint8\");\n        }\n\n        let finalInput;\n        \n        // 200 MB process limit for storing\n        if (input.byteLength < 200000000) {\n            \n            if (replace) {\n                this.#input = Array.from(input);\n            } else {\n                this.#input = this.#input.concat(Array.from(input));\n            }\n        \n            finalInput = Uint8Array.from(this.#input);\n\n            // 500+ MB of stored bytes warning\n            if (finalInput.byteLength > 500000000 && !this.warned) {\n                console.warn(\"The stored input is getting really big. Dependent from your environment this can lead to memory issues.\");\n                this.warned = true;\n            } \n        } \n\n        else {\n            console.warn(\"Input gets too big to safely store it in memory. It will get processed directly and neither stored nor concatenated to previous input. If the operation fails, it is due to memory issues.\");\n            finalInput = input;\n        }\n\n        // hash the input\n        this.#digest = await globalThis.crypto.subtle.digest(this.#algorithm, finalInput);\n    }\n\n\n    /**\n     * Shortcut to 'update(input, true)'.\n     * @param {*} input - Input gets converted to bytes and processed by crypto.subtle.digest. \n     */\n    async replace(input) {\n        await this.update(input, true);\n    }\n\n\n    /**\n     * Returns the current digest as an ArrayBuffer.\n     * @returns {ArrayBuffer}\n     */\n    digest() {\n        return this.#digest;\n    }\n\n    /**\n     * Returns the current digest as a hexadecimal string.\n     * @returns {string}\n     */\n    hexdigest() {\n        if (!this.#digest) {\n            return null;\n        }\n        return Array.from(new Uint8Array(this.#digest))\n            .map(b => b\n                .toString(16)\n                .padStart(2, \"0\"))\n            .join(\"\");\n    }\n\n    /**\n     * Appends BaseEx encoders to the returned object for the ability\n     * to covert the byte array of a hash to many representations.\n     */\n    #addConverters() {\n        \n        const detach = (arr, str) => arr.splice(arr.indexOf(str), 1);\n        const capitalize = str => str.charAt(0).toUpperCase().concat(str.slice(1));\n\n        const converters = Object.keys(BASE_EX);\n        this.basedigest = {\n            toSimpleBase: {}\n        };\n\n        detach(converters, \"base1\");\n        detach(converters, \"byteConverter\");\n        detach(converters, \"simpleBase\");\n\n        for (const converter of converters) {\n            this.basedigest[`to${capitalize(converter)}`] = (...args) => this.#digest \n                ? BASE_EX[converter].encode(this.#digest, ...args)\n                : null;\n        }\n\n        for (const converter in BASE_EX.simpleBase) {\n            this.basedigest.toSimpleBase[capitalize(converter)] = (...args) => this.#digest\n                ? BASE_EX.simpleBase[converter].encode(this.#digest, ...args)\n                : null;\n        }\n\n        this.basedigest.toBytes = (...args) => this.#digest\n            ? BASE_EX.byteConverter.encode(this.#digest, ...args)\n            : null;\n    }\n}\n"],"names":["BaseEx"],"mappings":"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"}